#!/bin/bash
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-5 Authors
#

trap 'echo "Test was interrupted by Control-C."; \
	killall BrokerageHouseMain; killall MarketExchangeMain; \
	killall DriverMain;  killall sar; killall sadc; killall vmstat; \
	killall iostat; ${DB_COMMAND} dbt5-${DBMS}-stop-db' INT
trap 'echo "Test was interrupted. Got TERM signal."; \
	killall BrokerageHouseMain; killall MarketExchangeMain; \
	killall DriverMain; killall client; killall driver;  killall sar; \
	killall sadc; killall vmstat; killall iostat; \
	${DB_COMMAND} dbt5-${DBMS}-stop-db' TERM

do_sleep()
{
	TIME="${1}"
	shift
    echo "${*}"
    sleep "${TIME}"
}

make_directories()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="ssh ${HOST}"
	fi
	${COMMAND} mkdir -p ${OUTPUT_DIR}
	${COMMAND} mkdir -p ${BH_OUTPUT_DIR}
	${COMMAND} mkdir -p ${MEE_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DRIVER_OUTPUT_DIR}
	${COMMAND} mkdir -p ${DB_OUTPUT_DIR}
}

stat_collection()
{
	if [ $STATS -ne 1 ]; then
		return
	fi

	ARGS=$1

	# If the this is a 1-tier test, system stats will be saved only in the db
	# directory.
	if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ]; then
		which ts ts-profile > /dev/null 2>&1
		RC=$?
		if [ $RC -gt 1 ]; then
			printf "WARNING: touchstone tools not found for driver system "
			echo "stats collection"
		else
			eval "ts sysstat -o ${DRIVER_OUTPUT_DIR}/$(hostname)/sysstat ${ARGS} &"
		fi
	fi

	# Don't collect system stats from the database system if the database
	# is a service.
	HOSTNAME=$(eval "${DB_COMMAND} hostname")
	if [ $DBAAS -eq 0 ]; then
		eval "${DB_COMMAND} which ts ts-sysstat" > /dev/null 2>&1
		RC=$?
		if [ $RC -gt 1 ]; then
			printf "WARNING: touchstone tools not found for system stats "
			printf "collection on %s\n" "${HOSTNAME}"
		else
			eval "${DB_COMMAND} ts sysstat \
					-o ${DB_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
		fi
	fi

	eval "${DB_COMMAND} which ts ts-${DBMS}-stat" > /dev/null 2>&1
	RC=$?
	if [ $RC -gt 1 ]; then
		printf "WARNING: touchstone tools not found for database stats "
		printf "collection for RDBMS %s on system %s\n" "${DBMS}" "${HOSTNAME}"
	else
		eval "${DB_COMMAND} ts ${DBMS}-stat \
				-o ${DB_OUTPUT_DIR}/${HOSTNAME}/dbstat ${DBSTATARGS} ${ARGS} &"
	fi
}

usage()
{
	if [ "$1" != "" ]; then
		echo
		echo "error: $1"
	fi

	cat << EOF
$(basename "${0}") is the Database Test 5 (DBT-5) workload runner

Usage:
  $(basename "${0}") [OPTIONS] DBMS DIRECTORY

General options:
  -b PARAMETERS  database PARAMETERS
  -c CUSTOMERS   active CUSTOMERS, default ${CUSTOMERS_INSTANCE}
  -d SECONDS     test duration in SECONDS
  -f SCALE_FACTOR
                 default ${SCALE_FACTOR}
  -h HOSTNAME    database hostname, default localhost
  -l DELAY       pacing DELAY in seconds, default ${PACING_DELAY}
  -n NAME        database name, default ${DB_NAME}
  --privileged   run tests as a privileged database user
  -p PORT        database PORT number
  -r SEED        random number SEED, using this invalidates test
  --stats        collect system stats and profile
  -s DELAY       DELAY between starting threads in milliseconds,
                 default ${SLEEPY}
  --tpcetools=EGENHOME
                 EGENHOME is the directory location of the TPC-E Tools
  -t CUSTOMERS   total CUSTOMERS, default ${CUSTOMERS_TOTAL}
  -u USERS       number of USERS to emulate, default ${USERS}
  -w DAYS        initial trade DAYS, default ${ITD}
  -z COMMENT     COMMENT describing this test run

DBMS options are:
  pgsql      PostgreSQL

DIRECTORY is the path to save test results.

@HOMEPAGE@
EOF
}

validate_parameter()
{
	if [ "$2" != "$3" ]; then
		usage "wrong argument '$2' for parameter '-$1'"
		exit 1
	fi
}

DB_NAME="dbt5"
DBAAS=0
CUSTOMERS_INSTANCE=5000
CUSTOMERS_TOTAL=5000
ITD=300
SCALE_FACTOR=500
SLEEPY=1000 # milliseconds
STATS=0
PACING_DELAY=0
PRIVILEGED=0
USERS=1

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-b)
		shift
		DB_PARAMS="${1}"
		;;
	(-c)
		shift
		# Configured customer count
		CUSTOMERS_INSTANCE="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "c" "${1}" "${CUSTOMERS_INSTANCE}"
		;;
	(-d)
		shift
		# duration of the test
		DURATION="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "d" "${1}" "${DURATION}"
		;;
	(-f)
		shift
		SCALE_FACTOR=$(echo "${1}" | grep -E "^[0-9]+$")
		validate_parameter "f" "${1}" "${SCALE_FACTOR}"
		;;
	(-h)
		shift
		DB_HOSTNAME="${1}"
		;;
	(-l)
		shift
		PACING_DELAY="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "l" "${1}" "${PACING_DELAY}"
		;;
	(-n)
		shift
		DB_NAME="${1}"
		;;
	(-p)
		shift
		# postmaster port
		DB_PORT="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "p" "${1}" "${DB_PORT}"
		;;
	(-r)
		shift
		SEED="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "r" "${1}" "${SEED}"
		;;
	(--stats)
		STATS=1
		;;
	(-s)
		shift
		SLEEPY="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "s" "${1}" "${SLEEPY}"
		;;
	(--tpcetools)
		shift
		EGENDIR="${1}"
		;;
	(--tpcetools=?*)
		EGENDIR="${1#*--tpcetools=}"
		;;
	(-t)
		shift
		# Configured customer count
		CUSTOMERS_TOTAL="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "t" "${1}" "${CUSTOMERS_TOTAL}"
		;;
	(-u)
		shift
		USERS="$(echo "${1}" | grep -E "^[0-9]+$")"
		validate_parameter "u" "${1}" "${USERS}"
		;;
	(-V | --version)
		echo "dbt5 (Database Test 5) v@PROJECT_VERSION@"
		exit 0
		;;
	(-w)
		shift
		# intial trade days
		ITD=$(echo "${1}" | grep -E "^[0-9]+$")
		validate_parameter "w" "${1}" "${ITD}"
		;;
	(-z)
		shift
		COMMENT="${1}"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

DBMS="${1}"
case "${DBMS}" in
(pgsql)
	export PGDATABASE="${DB_NAME}"
	;;
esac
shift


OUTPUT_DIR="${1}"
shift

# Check parameters.

if [ "${EGENDIR}" = "" ]; then
	usage "specify path to EGen using --tpcetools=<path>"
	exit 1
fi

if [ "x${DBMS}" = "x" ]; then
	usage "specify which dbms system to test using -a <pgsql>"
	exit 1
fi

if [ "x${DB_NAME}" = "x" ]; then
	usage "specify the database name to test using -n <dbt5>"
	exit 1
fi

if [ "x${CUSTOMERS_INSTANCE}" = "x" ]; then
	usage "specify the number of customers in this instance -c #"
	exit 1
fi

if [ "x${CUSTOMERS_TOTAL}" = "x" ]; then
	usage "specify the number of total customers -t #"
	exit 1
fi

if [ "x${DURATION}" = "x" ]; then
	usage "specify the duration of the test in seconds using -d #"
	exit 1
fi

if [ "x${USERS}" = "x" ]; then
	usage "specify the number of users using -u #"
	exit 1
fi

if [ "x${ITD}" = "x" ]; then
	usage "specify the number of initial trade days using -w #"
	exit 1
fi

if [ "x${OUTPUT_DIR}" = "x" ]; then
	usage "specify the location for results, directory must not exist, using -o <path>"
	exit 1
fi

if [ -d "${OUTPUT_DIR}" ]; then
	echo "directory '${OUTPUT_DIR}' exists, stopping to prevent possible"
	echo "clobbering of data, please specify another -o location"
	exit 1
fi

if [ ! "x${DB_HOSTNAME}" = "x" ]; then
    DB_HOSTNAME_ARG="-h ${DB_HOSTNAME}"
fi

if [ ! "x${DB_PORT}" = "x" ]; then
    DB_PORT_ARG="-p ${DB_PORT}"
fi

if [ ! "x${SEED}" = "x" ]; then
    SEEDARG="-r ${SEED}"
	echo "WARNING: INVALID RUN BECAUSE RANDOM NUMBER SEED SPECIFIED"
fi

# Determine the output directories for storing data.
BH_OUTPUT_DIR=${OUTPUT_DIR}/bh
MEE_OUTPUT_DIR=${OUTPUT_DIR}/mee
DRIVER_OUTPUT_DIR=${OUTPUT_DIR}/driver
DB_OUTPUT_DIR=${OUTPUT_DIR}/db

# Create the directories we will need.
make_directories
if [ ! "x${DB_HOSTNAME}" = x ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	make_directories ${DB_HOSTNAME}
	rsync -a -e "ssh" --delete ${DB_OUTPUT_DIR}/ \
		${DB_HOSTNAME}:${DB_OUTPUT_DIR}/
fi

# Create a readme file in the output directory and date it.
date >> ${OUTPUT_DIR}/readme.txt
echo "${COMMENT}" >> ${OUTPUT_DIR}/readme.txt
uname -a >> ${OUTPUT_DIR}/readme.txt
echo "Command line: $0 $@" >> ${OUTPUT_DIR}/readme.txt

# Output run information into the readme.txt.
echo "Database Scale Factor: ${SCALE_FACTOR}" >> ${OUTPUT_DIR}/readme.txt
echo "Database Customer Cardinality: ${CUSTOMERS_TOTAL}" >> ${OUTPUT_DIR}/readme.txt
echo "Test Duration: ${DURATION} seconds" >> ${OUTPUT_DIR}/readme.txt

if [ ! "x${DB_HOSTNAME}" = "x" ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	DB_COMMAND="ssh ${DB_HOSTNAME}"
	# Get the OS information from the database system.
	${DB_COMMAND} dbt5-get-os-info -o ${DB_OUTPUT_DIR}
	${DB_COMMAND} "uname -a >> ${DB_OUTPUT_DIR}/readme.txt"
else
	uname -a >> ${DB_OUTPUT_DIR}/readme.txt
	dbt5-get-os-info -o ${DB_OUTPUT_DIR}
fi

if [ "${PRIVILEGED}" -eq 1 ]; then
	# Restart database.
	eval "${DB_COMMAND} dbt5-${DBMS}-stop-db"
	if [ ! "x${DB_HOSTNAME}" = "x" ] && \
			[ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
		eval "${DB_COMMAND} dbt5-${DBMS}-start-db -p \"${DB_PARAMS}\" \
				-o ${DB_OUTPUT_DIR}" || exit 1
	else
		dbt5-${DBMS}-start-db -p "${DB_PARAMS}" -o ${DB_OUTPUT_DIR} || exit 1
	fi
fi

cat << EOF
# DBT-5

Workload consists of 4 stages:

1. Start of the Brokerage House server
2. Start of the Market Exchange server
3. Test (Start of the Customer Emulator)
4. Processing of results

Results will be found in: ${OUTPUT_DIR}
EOF

#
# Start the Brokerage House server.
#
echo
echo "## 1. Starting Brokerage House server"
echo
eval "${EGENDIR}/bin/BrokerageHouseMain ${DB_HOSTNAME_ARG} -d ${DB_NAME} \
		${DB_PORT_ARG} -o ${BH_OUTPUT_DIR} > ${BH_OUTPUT_DIR}/bh.out 2>&1" &

do_sleep 1 "Giving BrokerageHouseMain 1 second to start up."

#
# Start the Market server.
#
echo
echo "## 2. Starting Market Exchange server"
eval "${EGENDIR}/bin/MarketExchangeMain -c ${CUSTOMERS_INSTANCE} \
		-t ${CUSTOMERS_TOTAL} -i ${EGENDIR}/flat_in -o ${MEE_OUTPUT_DIR} \
		> ${MEE_OUTPUT_DIR}/mee.out 2>&1" &

# Start collecting data before we start the test.
SLEEP_RAMPUP=`expr ${USERS} + 1`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} \* ${SLEEPY}`
SLEEP_RAMPUP=`expr ${SLEEP_RAMPUP} / 1000`
SLEEPYTIME=`expr ${SLEEP_RAMPUP} + ${DURATION}`
SAMPLE_LENGTH=60
ITERATIONS=`expr ${SLEEPYTIME} / ${SAMPLE_LENGTH}`
ITERATIONS=`expr ${ITERATIONS} + 1`

# Start stats collection
stat_collection

#
# Start the Customer Driver.
#

echo
echo "## 3. Starting Customer driver: ${USERS} user(s)"
echo
echo "* 1 user starting every ${SLEEPY} milliseconds."
eval "${EGENDIR}/bin/DriverMain -c ${CUSTOMERS_INSTANCE} \
		-t ${CUSTOMERS_TOTAL} -f ${SCALE_FACTOR} -w ${ITD} -d ${DURATION} \
		-y ${SLEEPY} -u ${USERS} -n ${PACING_DELAY} ${SEEDARG} \
		-i ${EGENDIR}/flat_in -o ${DRIVER_OUTPUT_DIR} \
		> ${DRIVER_OUTPUT_DIR}/driver.out 2>&1" &
DCMPID="${!}"

do_sleep "${SLEEP_RAMPUP}" "* User ramp up to finish in ${SLEEP_RAMPUP} s."

# Sleep for the duration of the run.
do_sleep "${DURATION}" "* Test expected to finish in ${DURATION} s."

# Stop stats collection.
stat_collection -s

# Wait for DriverMain to exit
if [ -n ${DCMPID} ]; then
	wait ${DCMPID}
fi

# Run some post processing analyses.
echo
echo "## 4. Processing data"
echo

RESULTSFILE="${OUTPUT_DIR}/summary.rst"
dbt5-post-process --customers="${CUSTOMERS_TOTAL}" \
		"${DRIVER_OUTPUT_DIR}/mix-*.log" "${MEE_OUTPUT_DIR}/mix-*.log" \
		> "${RESULTSFILE}" 2> "${OUTPUT_DIR}/post-process.log"

# Servers don't go away by themselves like the driver does, so kill it.
killall -q BrokerageHouseMain MarketExchangeMain

if [ "${PRIVILEGED}" -eq 1 ]; then
	${DB_COMMAND} dbt5-${DBMS}-stop-db
fi

if [ ! "x${DB_HOSTNAME}" = "x" ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	rsync -a -e "ssh" --delete ${DB_HOSTNAME}:${DB_OUTPUT_DIR}/ \
			${DB_OUTPUT_DIR}/
fi

# (No, not the transaction log.)
if [ -f "${DB_OUTPUT_DIR}/log" ]; then
	chmod 644 "${DB_OUTPUT_DIR}/log"
fi

METRIC="$(grep "Reported Throughput" "${RESULTSFILE}" | awk '{print $3}')"
cat << EOF

## Primary Metric

${METRIC} TRTPS

Complete results are in: ${OUTPUT_DIR}
EOF
